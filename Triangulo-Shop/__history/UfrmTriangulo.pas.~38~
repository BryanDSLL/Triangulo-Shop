unit UfrmTriangulo;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes,
  Vcl.Graphics, Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.StdCtrls, Vcl.ExtCtrls,
  Vcl.Imaging.pngimage, Horse, Horse.Request, Horse.Response,
  System.Threading, System.Net.HttpClient, System.Net.HttpClientComponent, FireDAC.Comp.Client,
  System.Net.URLClient, System.JSON, System.DateUtils, System.Generics.Collections,
  cxGraphics, dxUIAClasses, cxLookAndFeels, cxLookAndFeelPainters, Vcl.Menus,
  cxButtons, cxControls, cxContainer, cxEdit, dxCoreGraphics, cxTextEdit,
  cxMaskEdit, cxButtonEdit, dxCore, cxClasses, dxSkinsForm;

type
  TMensagemRegistro = class
    Mensagem: string;
    Lado1: string;
    Lado2: string;
    Lado3: string;
    DataHora: TDateTime;
  end;
  TfrmTriangulo = class(TForm)
    lblLado1: TLabel;
    edtLado1: TEdit;
    lblLado2: TLabel;
    edtLado2: TEdit;
    lblLado3: TLabel;
    edtLado3: TEdit;
    btnCalcular: TcxButton;
    lblTipoTriangulo: TLabel;
    Image1: TImage;
    dxSkinController1: TdxSkinController;
    Shape1: TShape;
    btnRelatorio: TcxButton;
    procedure edtLado1KeyPress(Sender: TObject; var Key: Char);
    procedure edtLado2KeyPress(Sender: TObject; var Key: Char);
    procedure edtLado3KeyPress(Sender: TObject; var Key: Char);
    procedure btnCalcularClick(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    procedure btnRelatorioClick(Sender: TObject);
    procedure Conectar;

  private
    { Private declarations }
    function ValidarEdits(Edits: array of TEdit): Boolean;
    procedure EnviarRegistro(const Mensagem, Lado1, Lado2, Lado3: string; Now: TDateTime);
  public
    { Public declarations }
  end;

var
  frmTriangulo: TfrmTriangulo;

implementation

{$R *.dfm}

uses uConexao, URelatorio;

{$REGION 'CREATE DO FORM E CONEXÃO COM A API/BD'}

procedure TfrmTriangulo.FormCreate(Sender: TObject);
var
  MensagensRecebidas: TObjectList<TMensagemRegistro>;
begin

    Conectar;

  if not Assigned(dtmConexao) then
    dtmConexao := TdtmConexao.Create(Self);

  try
    dtmConexao.FDConnection1.Connected := True;
  except
    on E: Exception do
    begin
      ShowMessage('Erro ao conectar no banco triangulos após criação/restauração: ' + E.Message);
      Application.Terminate;
      Exit;
    end;
  end;

  MensagensRecebidas := TObjectList<TMensagemRegistro>.Create(True);

THorse.Post('/registrar',
  procedure(Req: THorseRequest; Res: THorseResponse; Next: TProc)
  var
    Mensagem: string;
    Lado1, Lado2, Lado3: string;
    DataHora: TDateTime;
    JsonBody: TJSONObject;
  begin
    JsonBody := TJSONObject.ParseJSONValue(Req.Body) as TJSONObject;
    try
      if Assigned(JsonBody) then
      begin
        Mensagem := JsonBody.GetValue<string>('mensagem');
        Lado1 := JsonBody.GetValue<string>('lado1');
        Lado2 := JsonBody.GetValue<string>('lado2');
        Lado3 := JsonBody.GetValue<string>('lado3');
        DataHora := ISO8601ToDate(JsonBody.GetValue<string>('datetime'));

        TThread.Synchronize(nil,
          procedure
          begin
            var Registro: TMensagemRegistro;
              Registro := TMensagemRegistro.Create;
              Registro.Mensagem := Mensagem;
              Registro.Lado1 := Lado1;
              Registro.Lado2 := Lado2;
              Registro.Lado3 := Lado3;
              Registro.DataHora := DataHora;

              MensagensRecebidas.Add(Registro);

              dtmConexao.InserirRegistro(Mensagem, Lado1, Lado2, Lado3, DataHora);

            //ShowMessage('Mensagem recebida na API: ' + Mensagem);
          end
        );

        Res.Send('Registro recebido!');
      end
      else
        Res.Status(400).Send('JSON inválido.');
    finally
      JsonBody.Free;
    end;
  end
);


THorse.Get('/lista',
  procedure(Req: THorseRequest; Res: THorseResponse; Next: TProc)
  var
    JsonArray: TJSONArray;
    JsonObj: TJSONObject;
    Qry: TFDQuery;
  begin
    JsonArray := TJSONArray.Create;
    try
      dtmConexao.ListarRegistros;
      Qry := dtmConexao.QryListar;

      while not Qry.Eof do
      begin
        JsonObj := TJSONObject.Create;
        JsonObj.AddPair('idregistro', Qry.FieldByName('idregistro').AsString);
        JsonObj.AddPair('tipo', Qry.FieldByName('tipo').AsString);
        JsonObj.AddPair('lado1', Qry.FieldByName('lado1').AsString);
        JsonObj.AddPair('lado2', Qry.FieldByName('lado2').AsString);
        JsonObj.AddPair('lado3', Qry.FieldByName('lado3').AsString);
        JsonObj.AddPair('data', DateToISO8601(Qry.FieldByName('data').AsDateTime));
        JsonArray.AddElement(JsonObj);
        Qry.Next;
      end;

      Res.Send(JsonArray.ToJSON);
    finally
      JsonArray.Free;
    end;
  end
);


THorse.Get('/contagem',
  procedure(Req: THorseRequest; Res: THorseResponse; Next: TProc)
  var
    JSONResult: TJSONObject;
    Qry: TFDQuery;
  begin
    JSONResult := TJSONObject.Create;
    try
      dtmConexao.ContarTipos;
      Qry := dtmConexao.QryContagem;

      while not Qry.Eof do
      begin
        JSONResult.AddPair(
          Qry.FieldByName('tipo').AsString,
          TJSONNumber.Create(Qry.FieldByName('total').AsInteger)
        );
        Qry.Next;
      end;

      Res.Send(JSONResult.ToJSON);
    finally
      JSONResult.Free;
    end;
  end
);

THorse.Get('/filtrarlista',
  procedure(Req: THorseRequest; Res: THorseResponse; Next: TProc)
  var
    JsonArray: TJSONArray;
    JsonObj: TJSONObject;
    Qry: TFDQuery;
    SQL, FiltroWhere: string;
    ParamID, ParamTipo, ParamData: string;
  begin
    JsonArray := TJSONArray.Create;
    Qry := TFDQuery.Create(nil);
    try
      Qry.Connection := dtmConexao.FDConnection1;

      ParamID := Req.Query.Items['idregistro'];
      ParamTipo := Req.Query.Items['tipo'];
      ParamData := Req.Query.Items['data'];

      SQL := 'SELECT idregistro, tipo, lado1, lado2, lado3, data FROM sistema.registros';
      FiltroWhere := '';

      if ParamID <> '' then
        FiltroWhere := FiltroWhere + ' idregistro = :idregistro';

      if ParamTipo <> '' then
      begin
        if FiltroWhere <> '' then
          FiltroWhere := FiltroWhere + ' AND ';
        FiltroWhere := FiltroWhere + ' tipo = :tipo';
      end;

      if ParamData <> '' then
      begin
        if FiltroWhere <> '' then
          FiltroWhere := FiltroWhere + ' AND ';
        FiltroWhere := FiltroWhere + ' CAST(data AS DATE) = :data';
      end;

      if FiltroWhere <> '' then
        SQL := SQL + ' WHERE ' + FiltroWhere;

      Qry.SQL.Text := SQL;

      if ParamID <> '' then
        Qry.ParamByName('idregistro').AsInteger := StrToIntDef(ParamID, 0);
      if ParamTipo <> '' then
        Qry.ParamByName('tipo').AsString := ParamTipo;
      if ParamData <> '' then
      begin
        ParamData := Copy(ParamData, 1, 10);
        Qry.ParamByName('data').AsDate := ISO8601ToDate(ParamData);
      end;

      Qry.Open;

      while not Qry.Eof do
      begin
        JsonObj := TJSONObject.Create;
        JsonObj.AddPair('idregistro', Qry.FieldByName('idregistro').AsString);
        JsonObj.AddPair('tipo', Qry.FieldByName('tipo').AsString);
        JsonObj.AddPair('lado1', Qry.FieldByName('lado1').AsString);
        JsonObj.AddPair('lado2', Qry.FieldByName('lado2').AsString);
        JsonObj.AddPair('lado3', Qry.FieldByName('lado3').AsString);
        JsonObj.AddPair('data', DateToISO8601(Qry.FieldByName('data').AsDateTime));
        JsonArray.AddElement(JsonObj);
        Qry.Next;
      end;

      Res.Send(JsonArray.ToJSON);
    finally
      JsonArray.Free;
      Qry.Free;
    end;
  end
);

MensagensRecebidas.Free;

THorse.Listen(9000);
end;

{$ENDREGION}

{$REGION 'FUNCIONAMENTO E REQUISIÇÃO NA API'}
procedure TfrmTriangulo.btnCalcularClick(Sender: TObject);
var
  a, b, c : Double;
begin
    if ValidarEdits([edtLado1, edtLado2, edtLado3]) then
      begin
        a := StrToFloat(edtLado1.Text);
        b := StrToFloat(edtLado2.Text);
        c := StrToFloat(edtLado3.Text);

        if (a + b > c) and
           (a + c > b) and
           (b + c > a)
        then
          begin
            //ShowMessage('É um triângulo');

            if (a = b) and (b = c) then
              begin
                //ShowMessage('Triângulo Equilátero')
                ShowMessage('Registro enviado com sucesso!');
                lblTipoTriangulo.Caption := 'Triângulo Equilátero';
                Image1.Picture.LoadFromFile(ExtractFilePath(Application.ExeName) + 'resource\equilátero.png');
                EnviarRegistro('Triângulo Equilátero', edtLado1.Text, edtLado2.Text, edtLado3.Text, Now);
              end

            else if ((a = b) and (b <> c)) or
                    ((a = c) and (b <> c)) or
                    ((b = c) and (a <> b)) then
              begin
                //ShowMessage('Triângulo Isósceles');
                ShowMessage('Registro enviado com sucesso!') ;
                lblTipoTriangulo.Caption := 'Triângulo Isósceles';
                Image1.Picture.LoadFromFile(ExtractFilePath(Application.ExeName) + 'resource\isósceles.png');
                EnviarRegistro('Triângulo Isósceles', edtLado1.Text, edtLado2.Text, edtLado3.Text, Now);
              end

            else
              begin
                //ShowMessage('Triângulo Escaleno');
                ShowMessage('Registro enviado com sucesso!');
                lblTipoTriangulo.Caption := 'Triângulo Escaleno';
                Image1.Picture.LoadFromFile(ExtractFilePath(Application.ExeName) + 'resource\escaleno.png');
                EnviarRegistro('Triângulo Escaleno', edtLado1.Text, edtLado2.Text, edtLado3.Text, Now);
              end
          end
        else
          begin
            ShowMessage('Não é um triângulo, coloque medidas válidas!');
            Image1.Picture.LoadFromFile(ExtractFilePath(Application.ExeName) + 'resource\ximage.png');
            EnviarRegistro('Não é um triângulo!', edtLado1.Text, edtLado2.Text, edtLado3.Text, Now);
          end;
      end;
end;
{$ENDREGION}

{$REGION 'TRATAMENTO DOS EDITS'}
procedure SomenteNumeros(Sender: TObject; var Key: Char);
begin
  if not (Key in ['0'..'9', #8]) then
    Key := #0;
end;


procedure TfrmTriangulo.edtLado1KeyPress(Sender: TObject; var Key: Char);
begin
  SomenteNumeros(Sender, Key);
end;


procedure TfrmTriangulo.edtLado2KeyPress(Sender: TObject; var Key: Char);
begin
  SomenteNumeros(Sender, Key);
end;


procedure TfrmTriangulo.edtLado3KeyPress(Sender: TObject; var Key: Char);
begin
  SomenteNumeros(Sender, Key);
end;

procedure TfrmTriangulo.btnRelatorioClick(Sender: TObject);
begin
  if not Assigned(frmRelatorio) then
    Application.CreateForm(TfrmRelatorio, frmRelatorio);

  frmRelatorio.ShowModal;
end;

{$ENDREGION}

{$REGION 'FUNÇÕES'}

procedure TfrmTriangulo.Conectar;
var
  DBExiste: Boolean;
  CriarBase: Integer;
  TempConnection: TFDConnection;
  TempQuery: TFDQuery;
  SI: TStartupInfo;
  PI: TProcessInformation;
  CmdLineStr: string;
  CmdLine: array[0..1023] of Char;
begin
  DBExiste := False;
  TempConnection := TFDConnection.Create(nil);
  TempQuery := nil;

  try
    try
      TempConnection.DriverName := 'PG';
      TempConnection.Params.Add('Server=localhost');
      TempConnection.Params.Add('Port=5432');
      TempConnection.Params.Add('User_Name=postgres');
      TempConnection.Params.Add('Password=#abc123#');
      TempConnection.Params.Add('Database=postgres');
      TempConnection.LoginPrompt := False;
      TempConnection.Connected := True;

      TempQuery := TFDQuery.Create(nil);
      TempQuery.Connection := TempConnection;
      TempQuery.SQL.Text := 'SELECT 1 FROM pg_database WHERE datname = :dbname';
      TempQuery.ParamByName('dbname').AsString := 'triangulos';
      TempQuery.Open;

      DBExiste := not TempQuery.IsEmpty;
    except
      on E: Exception do
      begin
        DBExiste := False;
        MessageDlg('Erro ao verificar existência da base de dados:' + sLineBreak + E.Message,
                   mtError, [mbOK], 0);
      end;
    end;
  finally
    if Assigned(TempQuery) then TempQuery.Free;
    TempConnection.Connected := False;
    TempConnection.Free;
  end;

  if not DBExiste then
  begin
    ShowMessage('ATENÇÂO!');
    CriarBase := MessageDlg('Verifiquei que você ainda não tem a base de dados na sua máquina.' + sLineBreak +
                            'Deseja restaurar uma base com dados genéricos para teste?',
                            mtConfirmation, [mbYes, mbNo], 0);

    if CriarBase <> mrYes then
    begin
      MessageDlg('Como não temos o banco necessário, o sistema será encerrado.',
                 mtInformation, [mbOk], 0);
      Application.Terminate;
      Exit;
    end;

    TempConnection := TFDConnection.Create(nil);
    TempQuery := nil;

    try
      try
        TempConnection.DriverName := 'PG';
        TempConnection.Params.Add('Server=localhost');
        TempConnection.Params.Add('Port=5432');
        TempConnection.Params.Add('User_Name=postgres');
        TempConnection.Params.Add('Password=#abc123#');
        TempConnection.Params.Add('Database=postgres');
        TempConnection.LoginPrompt := False;
        TempConnection.Connected := True;

        TempQuery := TFDQuery.Create(nil);
        TempQuery.Connection := TempConnection;
        TempQuery.SQL.Text :=
          'CREATE DATABASE triangulos ' +
          'ENCODING ''UTF8'' ' +
          'LC_COLLATE=''Portuguese_Brazil.1252'' ' +
          'LC_CTYPE=''Portuguese_Brazil.1252''';


        TempQuery.ExecSQL;

      except
        on E: Exception do
        begin
          MessageDlg('Erro ao criar o banco de dados: ' + sLineBreak + E.Message,
                     mtError, [mbOK], 0);
          Application.Terminate;
          Exit;
        end;
      end;
    finally
      if Assigned(TempQuery) then TempQuery.Free;
      TempConnection.Connected := False;
      TempConnection.Free;
    end;

    try
      dtmConexao.FDConnection1.Params.Database := 'triangulos';
      dtmConexao.FDConnection1.Connected := True;
    except
      on E: Exception do
      begin
        MessageDlg('Erro ao conectar na base triangulos: ' + sLineBreak + E.Message,
                   mtError, [mbOK], 0);
        Application.Terminate;
        Exit;
      end;
    end;

    try
      FillChar(SI, SizeOf(SI), 0);
      SI.cb := SizeOf(SI);
      FillChar(PI, SizeOf(PI), 0);

      SetEnvironmentVariable('PGPASSWORD', PChar('#abc123#'));

      CmdLineStr :=
        '"C:\Program Files (x86)\Triangulo\resource\bin\psql.exe" ' +
        '-U postgres -d triangulos -f ' +
        '"C:\Program Files (x86)\Triangulo\base\basePlain.sql"';

      StrPCopy(CmdLine, CmdLineStr);

      if CreateProcess(nil, CmdLine, nil, nil, False, 0, nil, nil, SI, PI) then
      begin
        WaitForSingleObject(PI.hProcess, INFINITE);
        CloseHandle(PI.hProcess);
        CloseHandle(PI.hThread);
      end
      else
        RaiseLastOSError;
    except
      on E: Exception do
      begin
        MessageDlg('Erro ao restaurar a base com o script SQL: ' + sLineBreak + E.Message,
                   mtError, [mbOK], 0);
        Application.Terminate;
        Exit;
      end;
    end;
  end;

  if not dtmConexao.FDConnection1.Connected then
  begin
    try
      dtmConexao.FDConnection1.Params.Database := 'triangulos';
      dtmConexao.FDConnection1.Connected := True;
    except
      on E: Exception do
      begin
        MessageDlg('Erro ao conectar à base triangulos após restauração: ' + sLineBreak + E.Message,
                   mtError, [mbOK], 0);
        Application.Terminate;
        Exit;
      end;
    end;
  end;
end;

function TfrmTriangulo.ValidarEdits(Edits: array of TEdit): Boolean;
var
  i, valor: Integer;
begin
  Result := True;

  for i := Low(Edits) to High(Edits) do
  begin

    if Trim(Edits[i].Text) = '' then
    begin
      ShowMessage('Preencha todos os campos.');
      Edits[i].SetFocus;
      Result := False;
      Exit;
    end;

    if not TryStrToInt(Edits[i].Text, valor) then
    begin
      ShowMessage('Digite um número válido no campo ' + Edits[i].Name);
      Edits[i].SetFocus;
      Result := False;
      Exit;
    end;

    if valor <= 0 then
    begin
      ShowMessage('Os valores devem ser maiores que 0.');
      Edits[i].SetFocus;
      Result := False;
      Exit;
    end;
  end;
end;

procedure TfrmTriangulo.EnviarRegistro(const Mensagem, Lado1, Lado2, Lado3: string; Now: TDateTime);
begin
  TTask.Run(
    procedure
    var
      HttpClient: TNetHTTPClient;
      Response: IHTTPResponse;
      StringStream: TStringStream;
    begin
      HttpClient := TNetHTTPClient.Create(nil);
      try
        StringStream := TStringStream.Create(
              '{"mensagem":"' + Mensagem + '",' +
                '"lado1": "' + Lado1 + '",' +
                '"lado2": "' + Lado2 + '",' +
                '"lado3": "' + Lado3 + '",' +
                '"datetime": "' + DateToISO8601(Now, False) + '"}',
  TEncoding.UTF8
);
        try
          Response := HttpClient.Post('http://localhost:9000/registrar', StringStream, nil, [
            TNameValuePair.Create('Content-Type', 'application/json')
          ]);

          TThread.Synchronize(nil,
            procedure
            begin
              if Response.StatusCode = 200 then
                //ShowMessage('Registro enviado com sucesso!')
              else
                ShowMessage('Erro ao enviar registro: ' + Response.StatusText);
            end
          );
        finally
          StringStream.Free;
        end;
      finally
        HttpClient.Free;
      end;
    end
  );
end;

{$ENDREGION}


// ------------------------------------------------- //


end.

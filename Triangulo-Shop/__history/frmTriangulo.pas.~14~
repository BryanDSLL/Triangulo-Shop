unit frmTriangulo;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.StdCtrls, Vcl.ExtCtrls,
  Vcl.Imaging.pngimage;

type
  TForm1 = class(TForm)
    Label1: TLabel;
    Edit1: TEdit;
    Label2: TLabel;
    Edit2: TEdit;
    Label3: TLabel;
    Edit3: TEdit;
    Button1: TButton;
    Label4: TLabel;
    Image1: TImage;
    procedure Edit1KeyPress(Sender: TObject; var Key: Char);
    procedure Edit2KeyPress(Sender: TObject; var Key: Char);
    procedure Edit3KeyPress(Sender: TObject; var Key: Char);
    procedure Button1Click(Sender: TObject);
  private
    { Private declarations }
    function ValidarEdits(Edits: array of TEdit): Boolean;
  public
    { Public declarations }
  end;

var
  Form1: TForm1;

implementation

{$R *.dfm}

// TRATAMENTO DOS EDITS
procedure SomenteNumeros(Sender: TObject; var Key: Char);
begin
  if not (Key in ['0'..'9', #8]) then
    Key := #0;
end;


procedure TForm1.Edit1KeyPress(Sender: TObject; var Key: Char);
begin
  SomenteNumeros(Sender, Key);
end;


procedure TForm1.Edit2KeyPress(Sender: TObject; var Key: Char);
begin
  SomenteNumeros(Sender, Key);
end;


procedure TForm1.Edit3KeyPress(Sender: TObject; var Key: Char);
begin
  SomenteNumeros(Sender, Key);
end;


procedure TForm1.Button1Click(Sender: TObject);
var
  a, b, c : Double;
begin
    if ValidarEdits([Edit1, Edit2, Edit3]) then
      begin
        a := StrToFloat(Edit1.Text);
        b := StrToFloat(Edit2.Text);
        c := StrToFloat(Edit3.Text);

        if (a + b > c) and
           (a + c > b) and
           (b + c > a)
        then
          begin
            //ShowMessage('É um triângulo');

            if (a = b) and (b = c) then
              begin
                //ShowMessage('Triângulo Equilátero')
                Image1.Picture.LoadFromFile(ExtractFilePath(Application.ExeName) + 'resource\equilátero.png');
              end

            else if ((a = b) and (b <> c)) or
                    ((a = c) and (b <> c)) or
                    ((b = c) and (a <> b)) then
              begin
                //ShowMessage('Triângulo Isósceles');
                Image1.Picture.LoadFromFile(ExtractFilePath(Application.ExeName) + 'resource\isósceles.png');
              end

            else
              begin
                //ShowMessage('Triângulo Escaleno');
                Image1.Picture.LoadFromFile(ExtractFilePath(Application.ExeName) + 'resource\escaleno.png');
              end
          end
        else
          ShowMessage('Não é um triângulo');
      end;
end;
// -------------------------------------------------------------- //

// FUNÇÕES

function TForm1.ValidarEdits(Edits: array of TEdit): Boolean;
var
  i, valor: Integer;
begin
  Result := True;

  for i := Low(Edits) to High(Edits) do
  begin

    if Trim(Edits[i].Text) = '' then
    begin
      ShowMessage('Preencha todos os campos.');
      Edits[i].SetFocus;
      Result := False;
      Exit;
    end;

    if not TryStrToInt(Edits[i].Text, valor) then
    begin
      ShowMessage('Digite um número válido no campo ' + Edits[i].Name);
      Edits[i].SetFocus;
      Result := False;
      Exit;
    end;

    if valor <= 0 then
    begin
      ShowMessage('Os valores devem ser maiores que 0.');
      Edits[i].SetFocus;
      Result := False;
      Exit;
    end;
  end;
end;


end.

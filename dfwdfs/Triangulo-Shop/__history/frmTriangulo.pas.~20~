unit frmTriangulo;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.StdCtrls, Vcl.ExtCtrls,
  Vcl.Imaging.pngimage, Horse, Horse.Request, Horse.Response,
  System.Threading, System.Net.HttpClient, System.Net.HttpClientComponent,
  System.Net.URLClient, System.JSON;

type
  TForm1 = class(TForm)
    lblLado1: TLabel;
    edtLado1: TEdit;
    lblLado2: TLabel;
    edtLado2: TEdit;
    lblLado3: TLabel;
    edtLado3: TEdit;
    btnCalcular: TButton;
    lblTipoTriangulo: TLabel;
    Image1: TImage;
    procedure edtLado1KeyPress(Sender: TObject; var Key: Char);
    procedure edtLado2KeyPress(Sender: TObject; var Key: Char);
    procedure edtLado3KeyPress(Sender: TObject; var Key: Char);
    procedure btnCalcularClick(Sender: TObject);
    procedure FormCreate(Sender: TObject);
  private
    { Private declarations }
    function ValidarEdits(Edits: array of TEdit): Boolean;
    procedure EnviarRegistro(const Mensagem: string);
  public
    { Public declarations }
  end;

var
  Form1: TForm1;

implementation

{$R *.dfm}

{$REGION 'FUNÇÕES'}
function TForm1.ValidarEdits(Edits: array of TEdit): Boolean;
var
  i, valor: Integer;
begin
  Result := True;

  for i := Low(Edits) to High(Edits) do
  begin

    if Trim(Edits[i].Text) = '' then
    begin
      ShowMessage('Preencha todos os campos.');
      Edits[i].SetFocus;
      Result := False;
      Exit;
    end;

    if not TryStrToInt(Edits[i].Text, valor) then
    begin
      ShowMessage('Digite um número válido no campo ' + Edits[i].Name);
      Edits[i].SetFocus;
      Result := False;
      Exit;
    end;

    if valor <= 0 then
    begin
      ShowMessage('Os valores devem ser maiores que 0.');
      Edits[i].SetFocus;
      Result := False;
      Exit;
    end;
  end;
end;
{$ENDREGION}

{$REGION 'CREATE DO FORM E CONEXÃO COM A API'}
procedure TForm1.FormCreate(Sender: TObject);
begin
  THorse.Post('/registrar',
    procedure(Req: THorseRequest; Res: THorseResponse; Next: TProc)
    var
      Mensagem: string;
    begin
      Mensagem := Req.Body<TJSONObject>.GetValue<string>('mensagem');

      TThread.Queue(nil,
        procedure
        begin
          ShowMessage('Mensagem recebida na API: ' + Mensagem);
        end
      );

      Res.Send('Registro recebido!');
    end
  );

  THorse.Listen(9000); // agora roda sincronamente
end;



procedure TForm1.EnviarRegistro(const Mensagem: string);
var
  HttpClient: TNetHTTPClient;
  Response: IHTTPResponse;
  StringStream: TStringStream;
begin
  HttpClient := TNetHTTPClient.Create(nil);
  try
    StringStream := TStringStream.Create('{"mensagem":"' + Mensagem + '"}', TEncoding.UTF8);
    try
      Response := HttpClient.Post('http://localhost:9000/registrar', StringStream, nil, [
        TNameValuePair.Create('Content-Type', 'application/json')
      ]);

      if Response.StatusCode = 200 then
        ShowMessage('Registro enviado com sucesso!')
      else
        ShowMessage('Erro ao enviar registro: ' + Response.StatusText);
    finally
      StringStream.Free;
    end;
  finally
    HttpClient.Free;
  end;
end;
{$ENDREGION}

{$REGION 'TRATAMENTO DOS EDITS'}
procedure SomenteNumeros(Sender: TObject; var Key: Char);
begin
  if not (Key in ['0'..'9', #8]) then
    Key := #0;
end;


procedure TForm1.edtLado1KeyPress(Sender: TObject; var Key: Char);
begin
  SomenteNumeros(Sender, Key);
end;


procedure TForm1.edtLado2KeyPress(Sender: TObject; var Key: Char);
begin
  SomenteNumeros(Sender, Key);
end;


procedure TForm1.edtLado3KeyPress(Sender: TObject; var Key: Char);
begin
  SomenteNumeros(Sender, Key);
end;
{$ENDREGION}

{$REGION 'FUNCIONAMENTO E REQUISIÇÃO NA API'}
procedure TForm1.btnCalcularClick(Sender: TObject);
var
  a, b, c : Double;
begin
    if ValidarEdits([edtLado1, edtLado2, edtLado3]) then
      begin
        a := StrToFloat(edtLado1.Text);
        b := StrToFloat(edtLado2.Text);
        c := StrToFloat(edtLado3.Text);

        if (a + b > c) and
           (a + c > b) and
           (b + c > a)
        then
          begin
            //ShowMessage('É um triângulo');

            if (a = b) and (b = c) then
              begin
                //ShowMessage('Triângulo Equilátero')
                lblTipoTriangulo.Caption := 'Triângulo Equilátero';
                Image1.Picture.LoadFromFile(ExtractFilePath(Application.ExeName) + 'resource\equilátero.png');
                EnviarRegistro('Triângulo Equilátero');
              end

            else if ((a = b) and (b <> c)) or
                    ((a = c) and (b <> c)) or
                    ((b = c) and (a <> b)) then
              begin
                //ShowMessage('Triângulo Isósceles');
                lblTipoTriangulo.Caption := 'Triângulo Isósceles';
                Image1.Picture.LoadFromFile(ExtractFilePath(Application.ExeName) + 'resource\isósceles.png');
                EnviarRegistro('Triângulo Isósceles');
              end

            else
              begin
                //ShowMessage('Triângulo Escaleno');
                lblTipoTriangulo.Caption := 'Triângulo Escaleno';
                Image1.Picture.LoadFromFile(ExtractFilePath(Application.ExeName) + 'resource\escaleno.png');
                EnviarRegistro('Triângulo Escaleno');
              end
          end
        else
          ShowMessage('Não é um triângulo, coloque medidas válidas!');
          Image1.Picture.LoadFromFile(ExtractFilePath(Application.ExeName) + 'resource\ximage.png');
      end;
end;
{$ENDREGION}

end.
